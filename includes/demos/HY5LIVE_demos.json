{"app":"HY5LIVE","time":1709077709,"files":[{"name":"p5 » hydra","code":"// p5 » hydra\n// pass p5 into hydra\n// cc teddavis.org 2024\n\ns0.initP5() // send p5 to hydra\nP5.toggle(0) // optionally hide p5\n\nH.pixelDensity(2) // 2x retina\n\nsrc(s0)\n\t.modulate(noize())\n\t.out()\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n}\n\nfunction draw() {\n\t// clear()\n\tcircle(mouseX, mouseY, 100)\n}"},{"name":"p5 » hydra - typo rays","code":"// p5 » hydra - typo rays\n// pass p5 typography into hydra\n// cc teddavis.org 2024\n\ns0.initP5() // send p5 to hydra\nP5.toggle(0) // hide p5\n\nH.pixelDensity(2) // set res\n\nsrc(s0)\n.add(src(o0).scale(1.03), .9)\n.modulateScale(noize(1000), .1)\n.out()\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\ttextAlign(CENTER, CENTER)\n}\n\nfunction draw() {\n\tclear()\n\tfill(255)\t\n\tcircle(mouseX, mouseY, height/2)\n\tblendMode(DIFFERENCE)\n\ttextSize(height/3)\n\ttranslate(noise(frameCount*.0051)*width, noise(frameCount*.005)*height)\n\ttext('HY5LIVE',0, 0)\n}"},{"name":"p5 » hydra - typo cos/sin","code":"// p5 » hydra - typo cos/sin\n// pass p5 typography into hydra\n// cc teddavis.org 2024\n\ns0.initP5() // send p5 to hydra\nP5.toggle(0) // hide p5\n\nH.pixelDensity(2) // set res\n\nsrc(s0)\n.add(src(o0).scale(()=>1-cos(time/4)/2), .4)\n.add(src(o0).scale(()=>1+sin(time/4)/2), .48)\n.modulateScale(noize(1000), .03)\n.out()\n\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\ttextAlign(CENTER, CENTER)\n}\n\nfunction draw() {\n\tclear()\n\tfill(0)\n\tstroke(255)\n\tblendMode(DIFFERENCE)\n\t// circle(mouseX, mouseY, height/2)\n\ttextSize(height/3)\n\ttranslate(noise(frameCount*.0051)*width, noise(frameCount*.005)*height)\n\ttext('HY5LIVE',0, 0)\n}"},{"name":"p5 » hydra » p5 - feedback","code":"// p5 » hydra » p5 - feedback\n// pass p5 into hydra and back again for visual feedback\n// cc teddavis.org 2024\n\ns0.initP5() // send p5 to hydra\nP5.toggle(0) // optionally hide p5\n\nH.pixelDensity(.25) // 2x retina\n\nsrc(s0)\n\t.scrollX(.01)\n\t.scale(1.01)\n\t.out()\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n}\n\nfunction draw() {\n\tH.get()\n\timage(h0, 0, 0)\n\t// image(h0, 0, 0, h0.width*1.01, h0.height*1.01)\n\tcircle(mouseX, mouseY, frameCount%150)\n}"},{"name":"hydra » p5","code":"// hydra » p5\n// pass hydra as texture into p5\n// cc teddavis.org 2024\n\n// H.toggle(0) // optionally hide hydra\n\ngradient(1)\n\t.blend(noize()\n\t\t.scale(1.1))\n\t.modulateScale(noize(), .2)\n\t.out(o0)\n\t\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL)\n\tangleMode(DEGREES)\n\tnoStroke()\n\tP5.zIndex(1) // P5 canvas on top\n}\n\nfunction draw() {\n\tclear()\n\torbitControl(3)\n\trotateY(frameCount / 3)\n\trotateX(frameCount / 4)\n\t\n\ttexture(H.get())\n\tbox(height / 2)\n}"},{"name":"hydra » p5 (min)","code":"// hydra » p5 (min)\n// min code example passing hydra into p5\n// cc teddavis.org 2024\n\nH.toggle(0) // hide hydra\n\nnoize().out()\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL)\n\tP5.zIndex(1)\n}\n\nfunction draw() {\n\tclear()\n\torbitControl(3)\n\trotateY(radians(frameCount/3))\n\n\tnoStroke()\n\ttexture(H.get())\n\tsphere(height/3)\n}"},{"name":"hydra » p5 » hydra","code":"// hydra » p5 » hydra\n// pass hydra into p5 and post-process with 2nd hydra!\n// cc teddavis.org 2024\n\nH.hide() // hide hydra\nnoize().out()\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL)\n\tangleMode(DEGREES)\n}\n\nfunction draw() {\n\tclear()\n\torbitControl(3)\n\trotateY(frameCount/3)\n\trotateX(frameCount/4)\n\t\n\tnoStroke()\n\ttexture(H.get())\n\tsphere(height/3)\n}\n\nfunction keyPressed(){\n\tif(key == 'S'){\n\t\tH2.save() // save 2nd hydra\n\t}\n}\n\n// 2nd instance of hydra\nvar H2 = HY5.hydra('h2', 'synth')\n\nH2.pixelDensity(2)\nH2.zIndex(2)\n\nsynth.s0.initP5()\n\nsynth.src(synth.s0)\n\t.modulateScale(synth.src(synth.o0).scale(1.01), .5)\n\t.out()"},{"name":"hydra » p5 (x4)","code":"// hydra » p5 (x4)\n// get hydra outputs as separate textures into p5\n// cc teddavis.org 2024\n\nH.pixelDensity(.5)\nH.toggle(0)\n\nosc().out()\n\nnoize().out(o1)\n\nvoronoi().out(o2)\n\ngradient().out(o3)\n\nrender()\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL)\n\tangleMode(DEGREES)\n\tP5.zIndex(1)\n}\n\nfunction draw() {\n\tclear()\n\torbitControl(3)\n\trotateX(frameCount/3)\n\tnoStroke()\n\t\n\tH.render() // get hydra o0-o3 as h0-h3\n\ttranslate(-height/2, 0)\n\ttexture(h0)\n\ttorus(height/4, height/12)\n\t\n\ttranslate(height/3, 0)\n\trotateX(90)\n\ttexture(h1)\n\ttorus(height/4, height/12)\n\t\n\ttranslate(height/3, 0)\n\trotateX(90)\n\ttexture(h2)\n\ttorus(height/4, height/12)\n\t\n\ttranslate(height/3, 0)\n\trotateX(90)\n\ttexture(h3)\n\ttorus(height/4, height/12)\n}"},{"name":"hydra » p5 (x4 as array)","code":"// hydra » p5 (x4 as array)\n// get hydra outputs as separate textures (array parsable) into p5\n// cc teddavis.org 2024\n\nH.pixelDensity(.5)\nH.toggle(1)\n\nosc().out()\n\nnoize().out(o1)\n\nvoronoi().out(o2)\n\ngradient().out(o3)\n\nrender()\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL)\n\tangleMode(DEGREES)\n\tP5.zIndex(1)\n}\n\nfunction draw() {\n\tclear()\n\torbitControl(3)\n\trotateX(frameCount / 3)\n\tnoStroke()\n\n\tH.render() // get hydra o0-o3 as h[0] - h[3]\n\tfor(let i = 0; i < 4; i++) {\n\t\tpush()\n\t\ttranslate(-height / 2 + i * height / 3, 0)\n\t\trotateX(i * 90)\n\t\ttexture(h[i])\n\t\ttorus(height / 4, height / 12)\n\t\ttranslate(height / 3, 0)\n\t\tpop()\n\t}\n}"},{"name":"hydra - pixelDensity","code":"// hydra - PixelDensity\n// jam with lofi graphics!\n// cc teddavis.org 2024\n\nH.pixelDensity(.1) // lo-fi\n// H.pixelDensity(2) // 2x retina\n\nvoronoi(3)\n\t.out()\n\n// pixelDensity glitch\nupdate = () => {\n\t// H.pixelDensity(Math.random(1))\n}"},{"name":"hydraAudio","code":"// hydraAudio\n// use hydra's audio reactivity\n// cc teddavis.org 2024\n\ns0.initP5()\n\nH.hide()\na.setSmooth(.92)\n\nosc(25, .1, ()=>a.fft[0]).out()\n\nlet rot\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL)\n\trot = createVector(0, 0, 0)\n\tangleMode(DEGREES)\n\tnoStroke()\n}\n\nfunction draw() {\n\trot.x += a.fft[0] * 3\n\trot.y += a.fft[1]\n\trot.z += a.fft[2]\n\t\n\trotateX(rot.y)\n\trotateY(rot.x)\n\t\n\ttexture(H.get())\n\t\n\tbox(height/3 - a.fft[0]*50)\n\trotateZ(rot.z)\n\ttorus(height/3, a.fft[0]*100)\n}"},{"name":"p5Audio","code":"// p5Audio\n// use p5.sound for audio-reactivity (req. chromium/firefox browser)\n// cc teddavis.org 2024\n\ns0.initP5()\n// P5.toggle(0)\n\n// src(s0)\n// \t.modulateScale(noize(1), ()=>a5.ampEase/200)\n// \t.out()\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\ta5.setup()\n}\n\nfunction draw() {\n\tclear()\n\n\ta5.update()\n\t// a5.ease = .05\n\n\t// direct avg\n\tstroke(255)\n\tnoFill()\n\ttranslate(0, height * .15)\n\tcircle(width * .25, 0, a5.ampL)\n\tcircle(width / 2, 0, a5.amp)\n\tcircle(width * .75, 0, a5.ampR)\n\n\n\t// eased avg\n\tfill(255)\n\tnoStroke()\n\tcircle(width * .25, 0, a5.ampEaseL)\n\tcircle(width / 2, 0, a5.ampEase)\n\tcircle(width * .75, 0, a5.ampEaseR)\n\n\n\t// wave\n\tnoFill()\n\tstroke(255)\n\ttranslate(0, height * .25)\n\tbeginShape()\n\tfor(let i = 0; i < a5.wave.length; i++) {\n\t\tvertex(i * width / a5.wave.length, a5.wave[i] * 150)\n\t}\n\tendShape()\n\n\n\t// wave eased\n\ttranslate(0, height * .15)\n\tbeginShape()\n\tfor(let i = 0; i < a5.waveEase.length; i++) {\n\t\tvertex(i * width / a5.waveEase.length, a5.waveEase[i] * 150)\n\t}\n\tendShape()\n\n\n\t// fft\n\tresetMatrix()\n\tstroke(255)\n\tnoFill()\n\tfor(let i = 0; i < a5.fft.length; i++) {\n\t\tvar bar = width / a5.fft.length\n\t\trect(i * bar, height, bar, -a5.fft[i])\n\t}\n\n\n\t// fft eased\n\tblendMode(DIFFERENCE)\n\tfill(255)\n\tnoStroke()\n\tfor(let i = 0; i < a5.fftEase.length; i++) {\n\t\tvar bar = width / a5.fftEase.length\n\t\trect(i * bar, height, bar, -a5.fftEase[i])\n\t}\n\tblendMode(BLEND)\n}"},{"name":"libs - p5.glitch","code":"// libs - p5.glitch\n// load any external libs within array below\n// cc teddavis.org 2024\n\nH.pd()\nH.toggle(1)\ns0.initP5() // default: s0, ie. src(s0).out()\n\nosc(60, .1, .5)\n\t.blend(src(s0))\n\t.out()\n\n// load p5.glitch\nlet libs = ['includes/js/libs/p5.glitch.js', 'https://cdn.jsdelivr.net/npm/p5.glitch@latest/p5.glitch.js']\nlet glitch\n\nfunction setup() {\n\tcreateCanvas(windowWidth / 4, windowHeight / 4)\n\tglitch = new Glitch(this) // init p5.glitch\n\tglitch.pixelate(1) // 1:1 resolution\n\tglitch.errors(false) // suppress errors\n}\n\nfunction draw() {\n\tglitch.loadType('jpg') // webp, png, jpg\n\tglitch.loadQuality(.8) // compression on input\n\tglitch.limitBytes(0.3, 1) // set range for glitch\n\n\tif(frameCount % 2 == 0) { // update from hydra\n\t\tglitch.loadImage(H.get()) // grab hydra\n\t}\n\n\tif(frameCount % 8 == 0) { // occasionally glitch\n\t\tglitch.randomBytes(1)\n\t\tglitch.buildImage()\n\t}\n\n\timage(glitch.image, 0, 0, glitch.width, glitch.height) // show glitch\n}"}]}